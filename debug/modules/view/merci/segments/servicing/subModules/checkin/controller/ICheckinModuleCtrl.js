/**
 * Cmtng module controller interface
 */
Aria.interfaceDefinition({
  $classpath: 'modules.view.merci.segments.servicing.subModules.checkin.controller.ICheckinModuleCtrl',
  $extends: "modules.view.merci.common.interfaces.IMerciCtrlInterface",
  $events: {
    /*Internal events */
    "layout.body.updated": "this event is raised when the layout for body has been updated",

    "page.load": "this event is raised when a page is loaded",
    "page.refresh": "this event is raised when a page need to be refresh",
    "page.callDisplayFieldsOnLoad": "this event is raised when a regulatory screen, nationality edit occurs.",

    "error.display": "this event is raised when the site want to communicate an error to the user",
    "success.display": "this event is raised when the site want to communicate a success to the user",
    "warning.display": "this event is raised when the site want to communicate a waring to the user",

    /* Application events */
    "home.loaded": "this event is raised when home page is displayed",
    "orientation.change": "Event fired when the orientation change",
    "fqtv.updated.loaded": "this event is raised when fqtv is updated",
    "offline.mode": "this event is raised when in offline mode",
    "seat.updated.loaded": "this event is raised when fqtv is updated",
    "sms.updated.loaded": "this event is raised when boarding pass sent through SMS",
    "country.updated": "this event is raised to save the country code in input box",
    "country.close": "this event is raised on close click",
    "server.error": "this event is raised when server returns error",
    "localStorage.refresh.done": "this event is raised when local storage key is refreshed",
    "seatMap.loaded": "this event is raised when seat map successfully loaded",
    "generror.error": "this event is raised when gen error happens",
    "sessionid.error": "this event is raised when session gets expired"
  },

  $interface: {
    getLayout: function() {},
    getCurrentTime: function(flag) {},
    getDeliverDocument: function() {},
    setDeliverDocument: function() {},
    getLastLayout: function() {},
    getGADetails: function() {},
    setGADetails: function(parameters) {},
    setLastName: function(name) {},
    getLastName: function() {},
    getEmbeded: function() {},
    getCurrentLayout: function() {},
    raiseEvent: function(evt) {},
    getCPR: function() {},
    setCPR: function(item) {},
    setExitRowListAnswerForAll: function(val) {},
    getExitRowListPopupShow: function() {},
    resetExitRowListPopupShow: function() {},
    reSetCPR: function() {},
    validateEmail: function(test) {},
    validatePhoneNumber: function(number) {},
    getFullJSON: function() {},
    getGenError: function() {},
    getSessionId: function() {},
    setSessionId: function(val) {},
    setSelectedPax: function(selection) {},
    setSelectedPaxPrimeRef: function(seatselectionInput) {},
    getSelectedPax: function() {},
    getSelectedPaxPrimeRef: function() {},
    getAcceptedCPR: function() {},
    getWarnings: function() {},
    setWarnings: function(warning) {},
    getSuccess: function() {},
    setSuccess: function(success) {},
    setCountryCode: function(code) {},
    getCountryCode: function() {},
    getNatEditCPR: function() {},
    getFQTV: function(customer, product, custID) {},
    getPaxDetailsForPrefill: function(customer, product, custID, Phone) {},
    getFFnumberPrefillPassSelct: function(customer, product) {},
    getAllocatedSeats: function() {},
    setAllocatedSeats: function(AllocatedSeat) {},
    getSeatNotLoaded: function() {},
    setSeatNotLoaded: function(code) {},
    updateLayout: function(nextLayout) {},
    cprRetreive: function(cprInput) {},
    acceptanceOverview_load: function() {},
    initiateAccept: function(InitiateAcceptInput) {},
    editFqtv: function(editFqtvInput) {},
    printBoardingPass: function() {},
    getBoardingPassResp: function() {},
    getBoardingPassRespDtls: function() {},
    displayErrors: function(errors, errorDiv, type) {},
    nationalityEdit: function(nationalityEditInput) {},
    nationalityPrompt: function() {},
    checkRegulatory: function() {},
    getCheckReg: function() {},
    regulatoryEdits: function(RegulatoryInput) {},
    changeSeat: function(seatMapInput) {},
    getSeatMapResponse: function() {},
    setSeatMapResponseEmpty: function() {},
    setSelectedProductForSeatMap: function(selection) {},
    getSelectedProductForSeatMap: function() {},
    allocateSeat: function(allocateseatInput) {},
    getSeat: function(customer, product, custID) {},
    getAllocatedSeat: function() {},
    emergencyExitSeatAlllocation: function(emergencyExitInput) {},
    getEmergencyExitSeat: function() {},
    getExitRowPsngrs: function() {},
    countryListPrompt: function(divId) {},
    sendSMS: function(smsInput, idIdentifier) {},
    initiateSMS: function() {},
    loadHome: function() {},
    preallocateSeat: function(preallocateInput) {},
    refreshLocalStorage: function(refreshInput) {},
    acceptanceConfirmation_load: function() {},
    setAcceptedCPR: function() {},
    cancelAcceptance: function(cancelCheckInInput) {},
    getMonth: function(date) {},
    getWeekDay: function(date) {},
    setSelectedPNR: function(val) {},
    getSelectedPNR: function() {},
    getAllCPRList: function() {},
    setAllCPRList: function() {},
    setFlowType: function(flow) {},
    getFlowType: function() {},
    getsvTime: function() {},
    checkFlightStatus: function(res, errors) {},
    setPnrType: function(selectText) {},
    getPnrType: function() {},
    checkSegmentEnabled: function(product) {},
    getEditCPR: function() {},
    getFQTVOpAirline: function() {},
    setIsFlowInCancelCheckin: function(val) {},
    getIsFlowInCancelCheckin: function() {},
    getCPRRespError: function() {},
    setCPRRespError: function(errors) {},
    selectFlights_load: function() {},
    getBannerInfo: function() {},
    setBannerInfo: function(item) {},
    tripOverView: function(cprInput) {},
    deliverDocument: function() {},
    removeProductLevelErrorsNotConfigured: function(errorList) {},
    getProductLevelErrors: function() {},
    setSelectedPaxOnly: function() {},
    getSelectedPaxOnly: function() {},
    getOperatingAirlinesList: function() {},
    setOperatingAirlinesList: function(airlineDl, site_mci_op_airline, site_mci_grp_of_airlines) {},
    getSelectedEditpax: function() {},
    setSelectedEditpax: function(val) {},
    getPassengerDetails: function() {},
    setPassengerDetails: function(item) {},
    getOtherDocumentType: function() {},
    clearOtherDocumentType: function() {},
    setEditCPRFromOverview: function(val) {},
    getEditCPRFromOverview: function() {},
    getCancelEnable: function() {},
    setCancelEnable: function() {},
    setFilteredListMBP: function() {},
    getFilteredListMBP: function() {},
    setValidApp: function() {},
    getValidApp: function() {},
    setIsFlowAppCancel: function() {},
    getIsFlowAppCancel: function() {},
    setIsAnyValidAppPax: function() {},
    getIsAnyValidAppPax: function() {},
    setAcceptedCprValidApp: function(val) {},
    paxflightSelection: function() {},
    setoriginalSelectedCPR: function(item) {},
    getAcceptedCprValidApp: function() {},
    setAcceptedValueForSeat: function() {},
    getAcceptedValueForSeat: function() {},
    getMoreDetailsRequiredToProceed: function() {},
    setMoreDetailsRequiredToProceed: function() {},
    getBlackListOverBooked: function() {},
    setBlackListOverBooked: function() {},
    setCountryNameCodeMap: function() {},
    getCountryNameCodeMap: function() {},
    setBoardingInput: function() {},
    getBoardingInput: function() {},
    getCurrentCustomer: function() {},
    setCurrentCustomer: function(currentCust) {},
    getValidDeliverDocInput: function() {},
    setValidDeliverDocInput: function() {},
    setBoardingPassNtIssued: function() {},
    getBoardingPassNtIssued: function() {},
    getUsaStatesNameToCodeMap: function() {},
    getAvailableStatesUSAAutoComplete: function() {},
    getCountryCallingCodes: function() {},
    dangerousGoods_load: function() {},
    getoriginalSelectedCPR: function() {},
    regulatoryEditsNext: function() {},
    setTelephoneNumberList: function() {},
    getTelephoneNumberList: function() {},
    onBackClick: function() {},
    setIsAcceptanceConfirmation: function() {},
    setNotRetrievedLastNames: function() {},
    getNotRetrievedLastNames: function() {},
    loadHomeForTripList: function() {},
    passengerDetailsLoad: function() {},
    loadEditCpr: function() {},
    booleanValue: function(value) {},
    setFirstTimeLoad: function() {},
    setIsSessionExpired: function() {},
    getIsSessionExpired: function() {},
    getUrlVars: function(val) {},
    setFooterInfo: function() {},
    findNotRetrievedLastNameList: function(cpr) {},
    getEmailList: function() {},
    getInfantOrPaxIndex: function(index){},
    findMissingDetailsForGTM: function(continer){},
    forFormingGTMsqData: function(continer,selecteCpr,flag){},
    getDaysAndYearFromCurrentDate:function(args,wholeBean){},
    iScrollImpl : function(iScrollBaseid,baseOl,li,callback){},
    arr_Dep_Date_TakingFrm_STDandSTA: function(cust,prod){}
  }
});