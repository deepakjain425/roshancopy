/**
 * Cmtng module controller interface
 */
Aria.interfaceDefinition({
	$classpath: 'modules.view.merci.segments.servicing.subModules.checkin.ssci.controller.ICheckinModuleCtrl',
	$extends: "modules.view.merci.common.interfaces.IMerciCtrlInterface",
	$events: {
		/*Internal events */
		"layout.body.updated": "this event is raised when the layout for body has been updated",

		"page.load": "this event is raised when a page is loaded",
		"page.refresh": "this event is raised when a page need to be refresh",
		"page.callDisplayFieldsOnLoad": "this event is raised when a regulatory screen, nationality edit occurs.",

		"error.display": "this event is raised when the site want to communicate an error to the user",
		"success.display": "this event is raised when the site want to communicate a success to the user",
		"warning.display": "this event is raised when the site want to communicate a waring to the user",

		/* Application events */
		"home.loaded": "this event is raised when home page is displayed",
		"orientation.change": "Event fired when the orientation change",
		"fqtv.updated.loaded": "this event is raised when fqtv is updated",
		"offline.mode": "this event is raised when in offline mode",
		"seat.updated.loaded": "this event is raised when fqtv is updated",
		"sms.updated.loaded": "this event is raised when boarding pass sent through SMS",
		"country.updated": "this event is raised to save the country code in input box",
		"country.close": "this event is raised on close click",
		"server.error": "this event is raised when server returns error",
		"localStorage.refresh.done": "this event is raised when local storage key is refreshed",
		"seatMap.loaded": "this event is raised when seat map successfully loaded",
		"generror.error": "this event is raised when gen error happens",
		"sessionid.error": "this event is raised when session gets expired"
	},

	$interface: {
		getLayout: function() {},
		getLastLayout: function() {},
		getGADetails: function() {},
		setGADetails: function(parameters) {},
		loadHome: function() {},
		setOperatingAirlinesList: function(airlineDl, site_mci_op_airline, site_mci_grp_of_airlines) {},
		getOperatingAirlinesList: function() {},
		setLastName: function(name) {},
		getLastName: function() {},
		setIsSessionExpired: function() {},
		getIsSessionExpired: function() {},
		booleanValue: function(value) {},
		getSuccess: function() {},
		setSuccess: function(success) {},
		cprRetreive: function(cprInput) {},
		validateEmail: function(test) {},
		validatePhoneNumber: function(number) {},
		displayErrors: function(errors, errorDiv, type) {},
		setTelephoneNumberList: function() {},
		getTelephoneNumberList: function() {},
		getListOfCheckedItems: function() {},
		getSelectedCPR: function() {},
		setSelectedCPR: function(selectedCPR) {},
		setFlowType: function(flow) {},
		getFlowType: function() {},
		setPassengerDetails: function(item) {},
		getPassengerDetails: function() {},
		updateFQTV: function(editFqtvInput,flow) {},
		dangerousGoods_load: function() {},
		updateFlightSelectedCPR: function(value) {},
		updateJourneySelectedCPR: function(value) {},
		updatePaxSelectedCPR: function(value) {},
		getEmbeded: function() {},
		setPnrType: function(selectText) {},
		getPnrType: function() {},
		getMonth: function(date) {},
		getMonthUTC: function(date) {},
		getWeekDay: function(date) {},
		getWeekDayUTC: function(date) {},
		loadHomeForTripList: function() {},
		ReConstructOriginalCPR: function(data) {},
		getCPR: function() {},
		setCPR: function(item) {},
		onBackClick: function() {},
		getsvTime: function(flag) {},
		checkRegulatory: function() {},
		tripOvrwCheckIn: function() {},
		getSessionId: function() {},
		setSessionId: function() {},
		journeySelection: function() {},
		countryList: function() {},
		getFormattedCuntryList: function() {},
		gettwoDigitThreeDigitAllCntryList: function() {},
		editRegulatory: function(input) {},
		passengerDetailsLoad: function() {},
		getWarnings: function() {},
		setWarnings: function(warning) {},
		getEmailList: function() {},
		setSelectedEditpax: function(item) {},
		getSelectedEditpax: function(flag) {},
		getPaxDetailsForPrefill: function(customerID, phone) {},
		getLandingPageDetail: function() {},
		toTitleCase: function(str) {},
		setIsSelectFlightPageError: function() {},
		getIsSelectFlightPageError: function() {},
		manageCheckin: function() {},
		processAcceptance: function(input) {},
		findProductidFrmflightid: function(journey, paxId, flightId) {},
		findProductidFrmflightList: function(journey, paxId, flightList) {},
		findPaxFlightIdFrmProductId: function(journey, productId) {},
		getSeatMap: function() {},
		loadRegulatory: function() {},
		getCustomerIndex: function(custId) {},
		getSeatForPax: function(journey, flightid, custid, seatCharecterstic) {},
		getLegIdBasedByFlightId: function(flightID) {},
		saveseat: function(input) {},
		removeCustToFlightFromSelectedCPR: function(flight, cust) {},
		removeFlightToCustFromSelectedCPR: function(flight, cust) {},
		findInfantIDForCust: function(flight, cust) {},
		getCheckedInProductIDs: function() {},
		addCheckedInProductID: function(prodID) {},
		storeDataLocally: function(key, value, remove) {},
		onSeatClick: function(evt, args) {},
		findAdltChildCountFromCustIDList: function(custList) {},
		deliverDocument: function(input) {},
		setSelectedFlightforMBP: function(val) {},
		getSelectedFlightforMBP: function() {},
		setFlightWiseDocs: function(val) {},
		getFlightWiseDocs: function() {},
		boardingPassLocalStorage: function(deliveredDocuments) {},
		displayExitPopup: function() {},
		emergencyExitSeatAlllocation: function() {},
		closeExitrowpopup: function() {},
		updateFQTVDeatilsInCPR: function() {},
		setNotRetrievedLastNames: function() {},
		getNotRetrievedLastNames: function() {},
		findNotRetrievedLastNameList: function(cpr) {},
		cancelAcceptance: function(input) {},
		sendConfirmationMail: function(input) {},
		getWarningsForThePage : function(page,_this,passengerID,flightID){},
		storeContactDetailsinLocal: function(customerID,phoneNumber,emailAddr){},
		getContactDetailsinLocal: function(customerID){},
		setCallingPage: function(callingPage) {},
		getCallingPage: function() {},
		setPassengerDetailsFlow: function(flow) {},
		getPassengerDetailsFlow: function() {},
		getErrors: function() {},
		setErrors: function(error) {},
		reconstructSelectedCPR: function(selectedCPR,flag){},
		getAgeOfCustomerInYears: function(selDOB){},
		setFrequentFlyerList: function(list){},
		getFrequentFlyerList: function(){},
		getAutocompleteStructureFromJsonStructure: function(input,flag){},
		getCabinClassByName: function(classN){},
		getOperatingAirline: function() {},
		setOperatingAirline: function(p_OperatingAirline) {},
		returnGTMCustomData: function(l_event,custFlightDetails,l_seatPreSelected){},
		loadRequiredPage: function(args){},
		getSelectedCPRFromTripOverview: function() {},
		setSelectedCPRFromTripOverview: function(selectedCPR) {},
		iScrollImpl : function(iScrollBaseid,baseOl,li,callback){},
		formingSelectedCustFlightInfo : function(){},
		storeTripForDirectCall : function(cprInput){},
		addToPassBook: function(productId) {},
		isMBPallowedForProduct: function(prodID, parameters) {}

	}
});